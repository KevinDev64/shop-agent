# import modules

import telebot
from telebot import *
import logging
import sqlite3
import os
import langchain
from langchain.text_splitter import RecursiveCharacterTextSplitter, CharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.document_loaders import TextLoader
from langchain.document_loaders import DirectoryLoader
from langchain.vectorstores import Chroma
from langchain.prompts import PromptTemplate
from langchain.chat_models import ChatOpenAI
from langchain.chains import RetrievalQA

# connect to the database
conn = sqlite3.connect(r"main.db", check_same_thread=False)
cur = conn.cursor()

# start logging
logging.basicConfig(level=logging.INFO, filename="../info.log", filemode='w')

# init a bot with token from file
bot_token_file = open("bot_token.txt", "r")
API_KEY = bot_token_file.readline()
bot_token_file.close()
bot = telebot.TeleBot("7174085128:AAGfMlZh5wUoV3vXfoGOYtb9vkN3SbqOmAE")

# set the openai token
token_file = open("openai_token.txt", "r")
token = token_file.readline()
token_file.close()
os.environ["OPENAI_API_KEY"] = token

docs_k = 65 # const
number_of_goods = 6 # const
goods = ["Philips EP2231/40", "Nivona CafeRomatica NICR 550", # list of goods
        "Delonghi ECAM 370.70.B", "Polaris PACM 2065AC", 
        "Philips EP2030/10", "REDMOND RCM-1517"] 
langchain.debug = False # debug is off

# read the vector databases
vectordb_list = []
embedding = OpenAIEmbeddings()
for i in range(number_of_goods):
    vectordb_list.append(Chroma(embedding_function=embedding, 
                                persist_directory="../output/"+str(i)))
for vectordb in vectordb_list:
    print(vectordb._collection.count())
    
def get_info(itemID):
    question = "–†–∞—Å—Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–π –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ"
    template = """–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∫–æ—Ñ–µ–º–∞—à–∏–Ω.
        –¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ - –æ–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É. –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞—Ö.
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (Context), —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ (Question).
        –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.
        –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É.
        –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∏–º–µ–µ—Ç –æ—Ç—à–µ–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É, –æ—Ç–≤–µ—Ç—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–∫—Å–∏–º—É–º 15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. 
        –î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—è –∫—Ä–∞—Ç–∫–æ –ø—Ä–æ –≤—Å–µ –¥–æ—Å—Ç–∏–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω–Ω–æ –¥–∞–Ω–Ω–æ–π –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã.
        Context: {context}
        Question: {question}"""
    QA_CHAIN_PROMPT = PromptTemplate.from_template(template)
    
    vectordb = vectordb_list[itemID]
    retriever = vectordb.as_retriever(search_type="similarity", search_kwargs={"k": docs_k})
    llm = ChatOpenAI(
        model_name="gpt-3.5-turbo",
        temperature=0,
        max_tokens = 250)
    qa_chain = RetrievalQA.from_chain_type(
        llm,
        retriever=retriever,
        return_source_documents=True,
        chain_type_kwargs={"prompt": QA_CHAIN_PROMPT})
    result = qa_chain({"query": question})
    return result["result"]

def get_answer(itemID, question):
    template = """–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∫–æ—Ñ–µ–º–∞—à–∏–Ω.
        –¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ - –ø–æ–Ω—è—Ç–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è. 
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (Context), —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ (Question).
        –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.
        –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É.
        –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∏–º–µ–µ—Ç –æ—Ç—à–µ–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É, –æ—Ç–≤–µ—Ç—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–∫—Å–∏–º—É–º 15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. 
        –î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º. –ì–æ–≤–æ—Ä–∏—Ç–µ –≥—Ä–∞–º–æ—Ç–Ω–æ.
        Context: {context}
        Question: {question}"""
    QA_CHAIN_PROMPT = PromptTemplate.from_template(template)
    
    vectordb = vectordb_list[itemID]
    retriever = vectordb.as_retriever(search_type="similarity", search_kwargs={"k": docs_k})
    llm = ChatOpenAI(
        model_name="gpt-3.5-turbo",
        temperature=0,
        max_tokens = 250)
    qa_chain = RetrievalQA.from_chain_type(
        llm,
        retriever=retriever,
        return_source_documents=True,
        chain_type_kwargs={"prompt": QA_CHAIN_PROMPT})
    result = qa_chain({"query": question})
    return result["result"]

def check_step(step, id): 
    cur.execute("SELECT status FROM user WHERE userID = ?", (id,))
    fetch_result = cur.fetchone()
    if step in fetch_result:
        return True
    else:
        return False
    
def get_itemID(userID):
    cur.execute("SELECT itemID FROM user WHERE userID = ?", (userID,))
    fetch_result = cur.fetchone()
    return fetch_result[0]

@bot.message_handler(commands=["start"])
def start_message(message):
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard = True,
        one_time_keyboard=True
    )
    zero_machine = types.KeyboardButton(text="Philips EP2231/40")
    first_machine = types.KeyboardButton(text="Nivona CafeRomatica NICR 550")
    second_machine = types.KeyboardButton(text="Delonghi ECAM 370.70.B")
    third_machine = types.KeyboardButton(text="Polaris PACM 2065AC")
    fourth_machine = types.KeyboardButton(text="Philips EP2030/10")
    fifth_machine = types.KeyboardButton(text="REDMOND RCM-1517")
    
    keyboard.row(zero_machine, first_machine)
    keyboard.row(second_machine, third_machine)
    keyboard.row(fourth_machine, fifth_machine)
    bot.send_message(message.chat.id, "üìÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∏–º—è –≤—Ä—É—á–Ω—É—é", reply_markup=keyboard)
    
    try:
        cur.execute("INSERT INTO user VALUES (?, ?, ?);", (message.chat.id, "menu", 0))
    except:
        cur.execute("UPDATE user SET status = ? WHERE userID = ?;", ("menu", message.chat.id))
    conn.commit()
    
@bot.message_handler(content_types="text", func=lambda message: check_step("menu", message.chat.id)) 
def machine_description(message):
    if message.text in goods:
        keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=True
        )
        back_to_menu_button = types.KeyboardButton(text="üóÉÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        keyboard.add(back_to_menu_button)
        
        bot.send_message(message.chat.id, """‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...\n–í—ã –≤—ã–±—Ä–∞–ª–∏ -> {}""".format(message.text))
        description = get_info(goods.index(message.text))
        bot.send_message(message.chat.id, description)
        bot.send_message(message.chat.id, """üîé –°–µ–π—á–∞—Å –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.""", reply_markup=keyboard)
        # change user status in db
        cur.execute("UPDATE user SET status = ?, itemID = ?  WHERE userID = ?;", ("chat", 
                                                                                 goods.index(message.text), 
                                                                                 message.chat.id))
        conn.commit()
    else:
        bot.send_message(message.chat.id, "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

@bot.message_handler(content_types="text", func= lambda message: check_step("chat", message.chat.id))
def chat_with_ai(message):
    keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=True
        )
    back_to_menu_button = types.KeyboardButton(text="üóÉÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    keyboard.add(back_to_menu_button)
    
    if message.text == back_to_menu_button.text:
        bot.send_message(message.chat.id, "‚õìÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        cur.execute("UPDATE user SET status = ? WHERE userID = ?;", ("menu", message.chat.id))
        conn.commit()
        
        keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard = True,
        one_time_keyboard=True
        )
        zero_machine = types.KeyboardButton(text="Philips EP2231/40")
        first_machine = types.KeyboardButton(text="Nivona CafeRomatica NICR 550")
        second_machine = types.KeyboardButton(text="Delonghi ECAM 370.70.B")
        third_machine = types.KeyboardButton(text="Polaris PACM 2065AC")
        fourth_machine = types.KeyboardButton(text="Philips EP2030/10")
        fifth_machine = types.KeyboardButton(text="REDMOND RCM-1517")
        
        keyboard.row(zero_machine, first_machine)
        keyboard.row(second_machine, third_machine)
        keyboard.row(fourth_machine, fifth_machine)
        bot.send_message(message.chat.id, "üìÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∏–º—è –≤—Ä—É—á–Ω—É—é", reply_markup=keyboard) 
    else:
        itemID = get_itemID(message.chat.id)
        answer = get_answer(itemID, message.text)
        bot.send_message(message.chat.id, answer, reply_markup=keyboard)
        
        
bot.infinity_polling(timeout=10, long_polling_timeout = 5)